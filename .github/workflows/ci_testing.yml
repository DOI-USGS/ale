name: Pull-Request-CI

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  Build-and-Test-LinuxOsx:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
       os: [ubuntu-latest, macos-latest]
       python-version: ["3.8", "3.9", "3.10", "3.11"]
    defaults:
      run:
        shell: bash -l {0}
    steps:
      - uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9
        with:
          submodules: true
      - uses: conda-incubator/setup-miniconda@3b0f2504dd76ef23b6d31f291f4913fb60ab5ff3
        with:
          miniforge-version: latest
          use-mamba: true
          channels: conda-forge
          activate-environment: ale
          environment-file: environment.yml
          auto-activate-base: false
          auto-update-conda: true
          python-version: ${{ matrix.python-version }}
      - name: Check build environment
        run: |
          conda list
      - name: Install Python Package
        run: |
          python setup.py install
      - name: Test Python Package
        run: |
           pytest --cov-report=xml --cov=ale tests/pytests -vv
      - name: Build C++ Package
        run: |
          mkdir -p build
          cd build
          cmake -DCMAKE_BUILD_TYPE=RELEASE -DCOVERAGE=ON -DALE_BUILD_DOCS=OFF ..
          cmake --build .
      - name: Test C++ Package
        run: |
          cd build
          ctest -VV
      # - name: Upload Coverage
      #   uses: codecov/codecov-action@v1
      #   with:
      #     token: ${{ secrets.CODECOV_TOKEN }}
      #     fail_ci_if_error: true
      #     verbose: true
      #   if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.9'

  Build-Docs:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -el {0}
    steps:
      - uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9
        with:
          submodules: true
          fetch-depth: 0
      - uses: conda-incubator/setup-miniconda@3b0f2504dd76ef23b6d31f291f4913fb60ab5ff3
        with:
          miniforge-version: latest
          use-mamba: true
          channels: conda-forge
          activate-environment: ale
          environment-file: doc_environment.yml
          auto-activate-base: false
          auto-update-conda: true
      - name: Check doc build environment
        run: |
          conda list
      - name: Build Docs
        run: |
          cd docs
          doxygen Doxyfile.in
          sphinx-build -b html . public

  Build-and-Test-Win:
    runs-on: windows-2019
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]
    steps:
      - uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9
        with:
          submodules: recursive
      - uses: conda-incubator/setup-miniconda@3b0f2504dd76ef23b6d31f291f4913fb60ab5ff3
        with:
          miniforge-version: latest
          use-mamba: true
          channels: conda-forge
          activate-environment: ale
          environment-file: environment.yml
          auto-activate-base: false
          auto-update-conda: true
          python-version: ${{ matrix.python-version }}
      - name: Check build environment
        run: |
          conda list
      - name: Build Package
        run: |
          mkdir -p build
          cd build
          cmake -DCMAKE_BUILD_TYPE=RELEASE -DCMAKE_WINDOWS_EXPORT_ALL_SYMBOLS=ON -G "Visual Studio 16 2019" -A x64 -DALE_BUILD_TESTS=OFF -DALE_BUILD_DOCS=OFF ..
          cmake --build . --target ALL_BUILD --config Release
          ls D:\a\ale\ale\build\Release
      - uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce
        with:
          name: ale
          path: |
            D:\a\ale\ale\build\Release\ale.dll
            D:\a\ale\ale\build\Release\ale.lib
