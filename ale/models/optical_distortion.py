# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from ale.models.base_model_ import Model
from ale.models.optical_distortion_radial import OpticalDistortionRadial  # noqa: F401,E501
from ale.models.optical_distortion_transverse import OpticalDistortionTransverse  # noqa: F401,E501
from ale import util


class OpticalDistortion(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, transverse: OpticalDistortionTransverse=None, radial: OpticalDistortionRadial=None):  # noqa: E501
        """OpticalDistortion - a model defined in OpenAPI

        :param transverse: The transverse of this OpticalDistortion.  # noqa: E501
        :type transverse: OpticalDistortionTransverse
        :param radial: The radial of this OpticalDistortion.  # noqa: E501
        :type radial: OpticalDistortionRadial
        """
        self.openapi_types = {
            'transverse': OpticalDistortionTransverse,
            'radial': OpticalDistortionRadial
        }

        self.attribute_map = {
            'transverse': 'transverse',
            'radial': 'radial'
        }

        self._transverse = transverse
        self._radial = radial

    @classmethod
    def from_dict(cls, dikt) -> 'OpticalDistortion':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The optical_distortion of this OpticalDistortion.  # noqa: E501
        :rtype: OpticalDistortion
        """
        return util.deserialize_model(dikt, cls)

    @property
    def transverse(self) -> OpticalDistortionTransverse:
        """Gets the transverse of this OpticalDistortion.


        :return: The transverse of this OpticalDistortion.
        :rtype: OpticalDistortionTransverse
        """
        return self._transverse

    @transverse.setter
    def transverse(self, transverse: OpticalDistortionTransverse):
        """Sets the transverse of this OpticalDistortion.


        :param transverse: The transverse of this OpticalDistortion.
        :type transverse: OpticalDistortionTransverse
        """

        self._transverse = transverse

    @property
    def radial(self) -> OpticalDistortionRadial:
        """Gets the radial of this OpticalDistortion.


        :return: The radial of this OpticalDistortion.
        :rtype: OpticalDistortionRadial
        """
        return self._radial

    @radial.setter
    def radial(self, radial: OpticalDistortionRadial):
        """Sets the radial of this OpticalDistortion.


        :param radial: The radial of this OpticalDistortion.
        :type radial: OpticalDistortionRadial
        """

        self._radial = radial
