# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from ale.models.base_model_ import Model
from ale import util


class Quaternions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, quaternions: List[List[float]]=None):  # noqa: E501
        """Quaternions - a model defined in OpenAPI

        :param quaternions: The quaternions of this Quaternions.  # noqa: E501
        :type quaternions: List[List[float]]
        """
        self.openapi_types = {
            'quaternions': List[List[float]]
        }

        self.attribute_map = {
            'quaternions': 'quaternions'
        }

        self._quaternions = quaternions

    @classmethod
    def from_dict(cls, dikt) -> 'Quaternions':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Quaternions of this Quaternions.  # noqa: E501
        :rtype: Quaternions
        """
        return util.deserialize_model(dikt, cls)

    @property
    def quaternions(self) -> List[List[float]]:
        """Gets the quaternions of this Quaternions.

        Orientation of the sensor provided in quaternions  # noqa: E501

        :return: The quaternions of this Quaternions.
        :rtype: List[List[float]]
        """
        return self._quaternions

    @quaternions.setter
    def quaternions(self, quaternions: List[List[float]]):
        """Sets the quaternions of this Quaternions.

        Orientation of the sensor provided in quaternions  # noqa: E501

        :param quaternions: The quaternions of this Quaternions.
        :type quaternions: List[List[float]]
        """
        if quaternions is None:
            raise ValueError("Invalid value for `quaternions`, must not be `None`")  # noqa: E501

        self._quaternions = quaternions
