# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from ale.models.base_model_ import Model
from ale import util


class ISD200FocalLengthModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, key: str=None, focal_length: float=None, focal_epsilon: float=None):  # noqa: E501
        """ISD200FocalLengthModel - a model defined in OpenAPI

        :param key: The key of this ISD200FocalLengthModel.  # noqa: E501
        :type key: str
        :param focal_length: The focal_length of this ISD200FocalLengthModel.  # noqa: E501
        :type focal_length: float
        :param focal_epsilon: The focal_epsilon of this ISD200FocalLengthModel.  # noqa: E501
        :type focal_epsilon: float
        """
        self.openapi_types = {
            'key': str,
            'focal_length': float,
            'focal_epsilon': float
        }

        self.attribute_map = {
            'key': 'key',
            'focal_length': 'focal_length',
            'focal_epsilon': 'focal_epsilon'
        }

        self._key = key
        self._focal_length = focal_length
        self._focal_epsilon = focal_epsilon

    @classmethod
    def from_dict(cls, dikt) -> 'ISD200FocalLengthModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ISD200_focal_length_model of this ISD200FocalLengthModel.  # noqa: E501
        :rtype: ISD200FocalLengthModel
        """
        return util.deserialize_model(dikt, cls)

    @property
    def key(self) -> str:
        """Gets the key of this ISD200FocalLengthModel.

        A key to get information about time/temp dependent focal length models  # noqa: E501

        :return: The key of this ISD200FocalLengthModel.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key: str):
        """Sets the key of this ISD200FocalLengthModel.

        A key to get information about time/temp dependent focal length models  # noqa: E501

        :param key: The key of this ISD200FocalLengthModel.
        :type key: str
        """

        self._key = key

    @property
    def focal_length(self) -> float:
        """Gets the focal_length of this ISD200FocalLengthModel.

        The focal length in mm  # noqa: E501

        :return: The focal_length of this ISD200FocalLengthModel.
        :rtype: float
        """
        return self._focal_length

    @focal_length.setter
    def focal_length(self, focal_length: float):
        """Sets the focal_length of this ISD200FocalLengthModel.

        The focal length in mm  # noqa: E501

        :param focal_length: The focal_length of this ISD200FocalLengthModel.
        :type focal_length: float
        """
        if focal_length is None:
            raise ValueError("Invalid value for `focal_length`, must not be `None`")  # noqa: E501

        self._focal_length = focal_length

    @property
    def focal_epsilon(self) -> float:
        """Gets the focal_epsilon of this ISD200FocalLengthModel.

        The uncertainty of the focal length in mm  # noqa: E501

        :return: The focal_epsilon of this ISD200FocalLengthModel.
        :rtype: float
        """
        return self._focal_epsilon

    @focal_epsilon.setter
    def focal_epsilon(self, focal_epsilon: float):
        """Sets the focal_epsilon of this ISD200FocalLengthModel.

        The uncertainty of the focal length in mm  # noqa: E501

        :param focal_epsilon: The focal_epsilon of this ISD200FocalLengthModel.
        :type focal_epsilon: float
        """

        self._focal_epsilon = focal_epsilon
