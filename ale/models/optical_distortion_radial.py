# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from ale.models.base_model_ import Model
from ale import util


class OpticalDistortionRadial(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, coefficients: List[float]=None):  # noqa: E501
        """OpticalDistortionRadial - a model defined in OpenAPI

        :param coefficients: The coefficients of this OpticalDistortionRadial.  # noqa: E501
        :type coefficients: List[float]
        """
        self.openapi_types = {
            'coefficients': List[float]
        }

        self.attribute_map = {
            'coefficients': 'coefficients'
        }

        self._coefficients = coefficients

    @classmethod
    def from_dict(cls, dikt) -> 'OpticalDistortionRadial':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The optical_distortion_radial of this OpticalDistortionRadial.  # noqa: E501
        :rtype: OpticalDistortionRadial
        """
        return util.deserialize_model(dikt, cls)

    @property
    def coefficients(self) -> List[float]:
        """Gets the coefficients of this OpticalDistortionRadial.


        :return: The coefficients of this OpticalDistortionRadial.
        :rtype: List[float]
        """
        return self._coefficients

    @coefficients.setter
    def coefficients(self, coefficients: List[float]):
        """Sets the coefficients of this OpticalDistortionRadial.


        :param coefficients: The coefficients of this OpticalDistortionRadial.
        :type coefficients: List[float]
        """

        self._coefficients = coefficients
