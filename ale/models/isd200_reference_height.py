# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from ale.models.base_model_ import Model
from ale import util


class ISD200ReferenceHeight(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, minheight: float=None, maxheight: float=None, unit: str=None):  # noqa: E501
        """ISD200ReferenceHeight - a model defined in OpenAPI

        :param minheight: The minheight of this ISD200ReferenceHeight.  # noqa: E501
        :type minheight: float
        :param maxheight: The maxheight of this ISD200ReferenceHeight.  # noqa: E501
        :type maxheight: float
        :param unit: The unit of this ISD200ReferenceHeight.  # noqa: E501
        :type unit: str
        """
        self.openapi_types = {
            'minheight': float,
            'maxheight': float,
            'unit': str
        }

        self.attribute_map = {
            'minheight': 'minheight',
            'maxheight': 'maxheight',
            'unit': 'unit'
        }

        self._minheight = minheight
        self._maxheight = maxheight
        self._unit = unit

    @classmethod
    def from_dict(cls, dikt) -> 'ISD200ReferenceHeight':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ISD200_reference_height of this ISD200ReferenceHeight.  # noqa: E501
        :rtype: ISD200ReferenceHeight
        """
        return util.deserialize_model(dikt, cls)

    @property
    def minheight(self) -> float:
        """Gets the minheight of this ISD200ReferenceHeight.


        :return: The minheight of this ISD200ReferenceHeight.
        :rtype: float
        """
        return self._minheight

    @minheight.setter
    def minheight(self, minheight: float):
        """Sets the minheight of this ISD200ReferenceHeight.


        :param minheight: The minheight of this ISD200ReferenceHeight.
        :type minheight: float
        """
        if minheight is None:
            raise ValueError("Invalid value for `minheight`, must not be `None`")  # noqa: E501

        self._minheight = minheight

    @property
    def maxheight(self) -> float:
        """Gets the maxheight of this ISD200ReferenceHeight.


        :return: The maxheight of this ISD200ReferenceHeight.
        :rtype: float
        """
        return self._maxheight

    @maxheight.setter
    def maxheight(self, maxheight: float):
        """Sets the maxheight of this ISD200ReferenceHeight.


        :param maxheight: The maxheight of this ISD200ReferenceHeight.
        :type maxheight: float
        """
        if maxheight is None:
            raise ValueError("Invalid value for `maxheight`, must not be `None`")  # noqa: E501

        self._maxheight = maxheight

    @property
    def unit(self) -> str:
        """Gets the unit of this ISD200ReferenceHeight.

        The unit that heights are provided in  # noqa: E501

        :return: The unit of this ISD200ReferenceHeight.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit: str):
        """Sets the unit of this ISD200ReferenceHeight.

        The unit that heights are provided in  # noqa: E501

        :param unit: The unit of this ISD200ReferenceHeight.
        :type unit: str
        """
        if unit is None:
            raise ValueError("Invalid value for `unit`, must not be `None`")  # noqa: E501

        self._unit = unit
